import argparse
from pathlib import Path
from typing import List
from cleansweep.cli.commands import Subcommand
from cleansweep.vcf import VCF
from cleansweep.inspect import Inspector
from cleansweep.plots import (
    AlleleDepthsPlot,
    QueryDepthsPlot
)
from cleansweep.typing import File, Directory
import json


class InspectCmd(Subcommand):
    """Creates plots and computes statistics about the CleanSweep filtering results."""

    def add_arguments(
        self, 
        parser: argparse.ArgumentParser
    ):
        
        parser.add_argument(
            "input", 
            type = str, 
            help = "Output .filter.swp file from CleanSweep."
        )
        parser.add_argument(
            "output", 
            type = str, 
            help = "Output directory."
        )
        parser.add_argument(
            "--vcf", "-v",
            type = str,
            required = False,
            help = "Output VCF file from CleanSweep. Required if --how includes \
\"allele-depths\"."
        )
        parser.add_argument(
            "--prefix", "-p", type = str, default = "cleansweep",
            help = "Prefix added to the output files. Defaults to \"%(default)s\"."
        )
        parser.add_argument(
            "--how",
            nargs = "+",
            choices = [
                "report",
                "allele-depths",
                "query-depths",
                "trace",
                "posterior",
                "autocorrelation",
                "all"
            ],
            default = ["stats"],
            help = """Outputs generated by this command.  
    report            CleanSweep filter parameters and descriptive statistics about 
                      the output VCF file 
    allele-depths     Scatter plot showing the reference and alternate allele depths
                      for all variants in the VCF, colored by the CleanSweep filtering
                      results
    query-depths      Histogram of the depth of coverage for the query strain, showing 
                      the estimated mean depth of coverage
    trace             Plots the traces from MCMC sampling
    posterior         Plots histograms and KDEs for the posteriors for allele depth 
                      distribution parameters and alleles
    autocorrelation   Autocorrelation plots for the allele depth distribution 
                      parameters
    all               Plots all of the above

Defaults to %(default)s.
            """
        )

        # Global options
        opts = parser.add_argument_group(
            title = "Plot options",
            description = "Controls how plots are rendered."
        )

        opts.add_argument(
            "--fig-format", "-f",
            type = str,
            nargs = "+",
            choices = ["png", "pdf", "eps", "svg"],
            default = ["png"],
            help = "Format of the output figures. Multiple formats may be provided. \
Defaults to %(default)s."
        )

        opts.add_argument(
            "--width",
            type = int, 
            help = "Width of the figures. Defaults to %(default)s.",
            default = 7
        )

        opts.add_argument(
            "--height",
            type = int, 
            help = "Height of the figures. Defaults to %(default)s.",
            default = 5
        )

        opts.add_argument(
            "--log", "-l",
            action = "store_true", 
            help = "If set, plots the figures in log scale.",
        )

    def run(
        self,
        input: File,
        output: Directory,
        vcf: File,
        prefix: str,
        how: List[str],
        # Plot options
        fig_format: List[str],
        width: int,
        height: int,
        log: bool,
        **kwargs
    ):
        
        # Create output directory
        outdir = Path(output)
        outdir.mkdir(
            exist_ok = True
        )
        
        inspector = Inspector(
            filter_dict = input,
            prefix = prefix,
            outdir = outdir,
            vcf = vcf
        )

        if "all" in how:
            how = ["report", "allele-depths", "query-depths", "trace", "autocorrelation", "posterior"]

        if "report" in how: 
            inspector.write_json()

        if "allele-depths" in how: 
            inspector.plot_allele_depths(
                figsize = (width, height),
                logscale = log,
                formats = fig_format
            )

        if "query-depths" in how:
            inspector.plot_query_depths(
                figsize = (width, height),
                logscale = log,
                formats = fig_format
            )

        if "trace" in how:
            inspector.plot_trace(
                figsize = (width, height),
                formats = fig_format
            )

        if "autocorrelation" in how:
            inspector.plot_autocorrelation(
                figsize = (width, height),
                formats = fig_format
            )

        if "posterior" in how:
            inspector.plot_posterior(
                figsize = (width, height),
                formats = fig_format
            )