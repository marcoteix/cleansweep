import argparse
from pathlib import Path
from typing import List
from cleansweep.cli.commands import Subcommand
from cleansweep.vcf import VCF
from cleansweep.inspect import Inspector
from cleansweep.plots import (
    AlleleDepthsPlot,
    QueryDepthsPlot
)
from cleansweep.typing import File, Directory
import json


class InspectCmd(Subcommand):
    """Creates plots and computes statistics about the CleanSweep filtering results."""

    def add_arguments(
        self, 
        parser: argparse.ArgumentParser
    ):
        
        parser.add_argument(
            "input", 
            type=str, 
            help="Output VCF from the CleanSweep filter module."
        )
        parser.add_argument(
            "output", 
            type=str, 
            help="Output directory."
        )
        parser.add_argument(
            "--cleansweep", "-c",
            type = str,
            required = False,
            help = "Output .filter.swp file from CleanSweep. Required if --how includes \
\"stats\"."
        )
        parser.add_argument(
            "--how",
            nargs = "+",
            choices = [
                "allele-depths",
                "query-depths",
                "stats",
                "all"
            ],
            default = ["stats"],
            help = """Outputs generated by this command.  
    stats             Descriptive statistics about the output VCF file 
    allele-depths     Scatter plot showing the reference and alternate allele depths
                      for all variants in the VCF, colored by the CleanSweep filtering
                      results
    query-depths      Histogram of the depth of coverage for the query strain, showing 
                      the estimated mean depth of coverage

Defaults to %(default)s.
            """
        )

        # Global options
        opts = parser.add_argument_group(
            title = "Global options",
            description = "Options applying to all outputs."
        )

        opts.add_argument(
            "--fig-format", "-f",
            type = str,
            nargs = "+",
            choices = ["png", "pdf", "eps", "svg"],
            default = ["png"],
            help = "Format of the output figures. Multiple formats may be provided. \
Defaults to %(default)s."
        )

        # Allele depths options
        ad_opts = parser.add_argument_group(
            title = "Allele depth options",
            description = "Options for the allele depths plot."
        )

        ad_opts.add_argument(
            "--ad-width", "-adw",
            type = int, 
            help = "Width of the figure. Defaults to %(default)s.",
            default = 6
        )

        ad_opts.add_argument(
            "--ad-height", "-adh",
            type = int, 
            help = "Height of the figure. Defaults to %(default)s.",
            default = 5
        )

        ad_opts.add_argument(
            "--ad-log", "-adl",
            action = "store_true", 
            help = "If set, plots the figure in log scale.",
        )

        # Query depths options
        qd_opts = parser.add_argument_group(
            title = "Query depth options",
            description = "Options for the query depths plot."
        )

        qd_opts.add_argument(
            "--qd-width", "-qdw",
            type = int, 
            help = "Width of the figure. Defaults to %(default)s.",
            default = 6
        )

        qd_opts.add_argument(
            "--qd-height", "-qdh",
            type = int, 
            help = "Height of the figure. Defaults to %(default)s.",
            default = 5
        )

        qd_opts.add_argument(
            "--qd-log", "-qdl",
            action = "store_true", 
            help = "If set, plots the figure in log scale.",
        )

        qd_opts.add_argument(
            "--qd-bins", "-qdb",
            type = int, 
            help = "Number of histogram bins. Optional.",
            required = False
        )
        
        
    def run(
        self,
        input: File,
        output: Directory,
        cleansweep: File,
        how: List[str],

        # Global options
        fig_format: List[str],
        
        # Allele depth options
        ad_width: int,
        ad_height: int,
        ad_log: bool,

        # Query depths options
        qd_width: int,
        qd_height: int,
        qd_log: bool,
        qd_bins: int,

        **kwargs

    ):
        
        # Create output directory
        outdir = Path(output)
        outdir.mkdir(
            exist_ok = True
        )
        
        # Read VCF
        vcf = VCF(input).read(
            chrom = None
        )

        if (
            "allele-depths" in how or \
            "all" in how
        ):

            allele_depths_plot = AlleleDepthsPlot(
                figsize = (ad_width, ad_height)
            )

            allele_depths_plot.plot(
                vcf = vcf,
                log = ad_log
            )

            # Save
            for fmt in fig_format:
                allele_depths_plot.save(
                    outdir.joinpath(
                        "cleansweep.allele_depths." + fmt
                    )
                )

        if (
            "stats" in how or \
            "all" in how
        ):

            if cleansweep is None:
                raise ValueError(
                    "--how includes \"stats\" but no cleansweep .filter.swp file was provided."
                )
            
            inspector = Inspector()
            report = inspector.report(
                vcf = vcf,
                cleansweep = cleansweep
            )

            # Save as a JSON file
            with open(
                outdir.joinpath(
                    "cleansweep.info.json"
                ),
                "w"
            ) as file:
                json.dump(
                    report,
                    file,
                    indent = 4
                )

        if (
            "query-depths" in how or \
            "all" in how
        ):

            query_depths_plot = QueryDepthsPlot(
                figsize = (qd_width, qd_height)
            )    

            query_depths_plot.plot(
                cleansweep = cleansweep,
                log = qd_log,
                bins = qd_bins,
                title = vcf.chrom.iloc[0]
            )     

            # Save
            for fmt in fig_format:
                query_depths_plot.save(
                    outdir.joinpath(
                        "cleansweep.query_depths." + fmt
                    )
                )